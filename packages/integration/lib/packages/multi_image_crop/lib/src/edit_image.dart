import 'dart:io';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:multi_image_crop/src/common/widgets/available_options_container.dart';
import 'package:scroll_to_index/scroll_to_index.dart';
import 'common/util/colors.dart';
import 'common/util/constants.dart';
import 'dart:math' as math;
import 'dart:ui' as ui;
import 'common/widgets/icon_button.dart';
import 'common/widgets/text_painter/AddText.dart';

class EditImage extends StatefulWidget {
  const EditImage(
      {Key? key,
      required this.image,
      required this.onFiltered,
      this.activeColor,
      this.pixelRatio})
      : super(key: key);

  final File image;
  final double? pixelRatio;
  final Function onFiltered;
  final Color? activeColor;

  @override
  State<EditImage> createState() => _EditImageState();
}

class _EditImageState extends State<EditImage> {
  /// Global key [_globalKey] use by Repaint Boundary to generate image.
  final GlobalKey _globalKey = GlobalKey();

  /// [selectedFilter] holds the value of selected filter.
  int selectedFilter = 0;

  /// [selectedByteData] is new Repaint image generated by [_capturePngToByteData].
  ByteData? selectedByteData;

  /// [AutoScrollController] is used to scroll the list of filters.
  AutoScrollController? _autoScrollController;

  /// [_rotationController] used to find the offset of current index level
  /// to rotate selected image.
  final ScrollController _rotationController = ScrollController();
  final ScrollController _textRotationController = ScrollController();

  /// Default scrollDirection.
  Axis scrollDirection = Axis.horizontal;

  /// Enum [_selectedAction] define the selected operation on image.
  ActionType _selectedAction = ActionType.transform;

  /// [rotationValue] is value of image rotated in degree and [absoluteRotation]
  /// is value of image rotated in multiples of 90 degree.
  /// [scaleX] and [scaleY] boolean value use to flip the images.
  double rotationValue = 0, absoluteRotation = 0, scaleX = 1, scaleY = 1;

  /// [isRotationActive] is use to show active color of icon.
  bool isRotationActive = false, isEditorEnable = false;

  List<Map<TextWidget, dynamic>> textWidgets = [];
  int? currentTextIndex;

  @override
  void initState() {
    super.initState();
    _rotationController.addListener(() {
      setState(() {
        rotationValue = _rotationController.offset / 100;
      });
    });

    _textRotationController.addListener(() {
      if (currentTextIndex != null) {
        setState(() {
          textWidgets[currentTextIndex!][TextWidget.angle] =
              _textRotationController.offset / 100;
        });
      }
    });

    _autoScrollController = AutoScrollController(
        viewportBoundaryGetter: () =>
            Rect.fromLTRB(0, 0, MediaQuery.of(context).padding.bottom, 0),
        axis: scrollDirection);
  }

  @override
  void dispose() {
    super.dispose();
    _autoScrollController!.dispose();
    _rotationController.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: CustomColors.primaryColor,
      appBar: utilityAppBar(),
      body: SafeArea(
          child: Column(
        children: <Widget>[
          Expanded(
            child: paintBoundary(),
          ),
          allActionUi(),
          bottomActionPane()
        ],
      )),
    );
  }

  PreferredSizeWidget utilityAppBar() {
    return AppBar(
      title: const Text(
        'Edit',
        style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
      ),
      elevation: 0,
      backgroundColor: CustomColors.primaryColor,
      leading: IconButton(
        icon: const Icon(CupertinoIcons.clear, color: Colors.white),
        onPressed: () {
          Navigator.pop(context);
        },
      ),
      actions: <Widget>[
        TextButton(
            onPressed: () {
              if (true) {
                _capturePngToByteData().then((value) {
                  widget.onFiltered(value);
                });
              }
              Navigator.pop(context);
            },
            child: const Text(
              'Save',
              style: TextStyle(
                  color: CustomColors.secondaryColor,
                  fontSize: 18,
                  fontWeight: FontWeight.bold),
            )),
      ],
    );
  }

  /// Ui shows the available operation perform on image.
  Widget bottomActionPane() {
    return Visibility(
      visible: !isEditorEnable,
      maintainSize: true,
      maintainAnimation: true,
      maintainState: true,
      child: Container(
        height: 50,
        width: MediaQuery.of(context).size.width,
        color: CustomColors.primaryColorLight,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            CustomIconButton(
                icon: CupertinoIcons.crop_rotate,
                inActiveColor: CustomColors.secondaryColor,
                activeColor: widget.activeColor ?? CustomColors.activeColor,
                toolTip: 'Transform',
                isActive: _selectedAction == ActionType.transform,
                onTap: () =>
                    setState(() => _selectedAction = ActionType.transform)),
            CustomIconButton(
                icon: CupertinoIcons.color_filter,
                inActiveColor: CustomColors.secondaryColor,
                activeColor: widget.activeColor ?? CustomColors.activeColor,
                toolTip: 'Filters',
                isActive: _selectedAction == ActionType.filters,
                onTap: () =>
                    setState(() => _selectedAction = ActionType.filters)),
            CustomIconButton(
                icon: CupertinoIcons.textbox,
                inActiveColor: CustomColors.secondaryColor,
                activeColor: widget.activeColor ?? CustomColors.activeColor,
                toolTip: 'Text',
                isActive: _selectedAction == ActionType.text,
                onTap: () {
                  setState(() {
                    _selectedAction = ActionType.text;
                    isEditorEnable = true;
                  });
                  Navigator.of(context)
                      .push(
                    PageRouteBuilder(
                      opaque: false,
                      pageBuilder: (_, __, ___) => AddText(
                          activeColor:
                              widget.activeColor ?? CustomColors.activeColor),
                    ),
                  )
                      .then((value) {
                    if (value != null) {
                      Map<TextWidget, dynamic> map;
                      map = value;
                      map.addAll({
                        TextWidget.x: 100.0,
                        TextWidget.y: 100.0,
                        TextWidget.xPrev: 100.0,
                        TextWidget.yPrev: 100.0,
                        TextWidget.angle: 0.0
                      });
                      textWidgets.add(map);
                    }
                    setState(() {
                      isEditorEnable = false;
                      currentTextIndex = textWidgets.length - 1;
                    });
                  });
                }),
            // CustomIconButton(
            //     icon: CupertinoIcons.hand_draw,
            //     inActiveColor: CustomColors.secondaryColor,
            //     activeColor: widget.activeColor ?? CustomColors.activeColor,
            //     toolTip: 'Draw',
            //     isActive: _selectedAction == ActionType.draw,
            //     onTap: () => setState(() => _selectedAction = ActionType.draw)),
          ],
        ),
      ),
    );
  }

  Widget allActionUi() {
    return SizedBox(
      height: 150.0,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [transform(), allFilters(), text()],
      ),
    );
  }

  Widget transform() {
    return Visibility(
        visible: ActionType.transform == _selectedAction,
        child: Column(
          children: [
            Align(
              alignment: Alignment.center,
              child: AvailableOptions(
                onTap: () {},
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    CustomIconButton(
                        icon: CupertinoIcons.rotate_right,
                        inActiveColor: CustomColors.secondaryColor,
                        activeColor:
                            widget.activeColor ?? CustomColors.activeColor,
                        toolTip: 'Rotate',
                        margin: const EdgeInsets.only(
                            left: 10.0, top: 0.0, right: 10.0, bottom: 0.0),
                        isActive: isRotationActive,
                        onTap: () {
                          if (absoluteRotation == 0) {
                            setState(() {
                              absoluteRotation = 90;
                              isRotationActive = true;
                            });
                          } else if (absoluteRotation == 90) {
                            setState(() {
                              absoluteRotation = 180;
                              isRotationActive = true;
                            });
                          } else if (absoluteRotation == 180) {
                            setState(() {
                              absoluteRotation = 270;
                              isRotationActive = true;
                            });
                          } else if (absoluteRotation == 270) {
                            setState(() {
                              absoluteRotation = 360;
                              isRotationActive = false;
                            });
                          } else {
                            setState(() {
                              absoluteRotation = 90;
                              isRotationActive = true;
                            });
                          }
                        }),
                    CustomIconButton(
                        icon: CupertinoIcons.chevron_left_slash_chevron_right,
                        inActiveColor: CustomColors.secondaryColor,
                        activeColor:
                            widget.activeColor ?? CustomColors.activeColor,
                        toolTip: 'Flip Horizontal',
                        margin: const EdgeInsets.only(
                            left: 10.0, top: 0.0, right: 10.0, bottom: 0.0),
                        isActive: scaleX.isNegative,
                        onTap: () {
                          if (scaleX.isNegative) {
                            setState(() => scaleX = 1);
                          } else {
                            setState(() => scaleX = -1);
                          }
                        }),
                    CustomIconButton(
                        icon: CupertinoIcons.chevron_up_chevron_down,
                        inActiveColor: CustomColors.secondaryColor,
                        activeColor:
                            widget.activeColor ?? CustomColors.activeColor,
                        toolTip: 'Flip Vertical',
                        margin: const EdgeInsets.only(
                            left: 10.0, top: 0.0, right: 10.0, bottom: 0.0),
                        isActive: scaleY.isNegative,
                        onTap: () {
                          if (scaleY.isNegative) {
                            setState(() => scaleY = 1);
                          } else {
                            setState(() => scaleY = -1);
                          }
                        }),
                  ],
                ),
              ),
            ),
            changeAngleWidget(_rotationController),
          ],
        ));
  }

  Widget changeAngleWidget(ScrollController controller) {
    return Container(
      height: 45,
      width: MediaQuery.of(context).size.width * 0.85,
      margin: const EdgeInsets.only(bottom: 10),
      child: Stack(
        children: [
          Align(
            alignment: Alignment.bottomCenter,
            child: SizedBox(
                width: MediaQuery.of(context).size.width * 0.8,
                height: 25,
                child: ListView.builder(
                    scrollDirection: Axis.horizontal,
                    physics: const BouncingScrollPhysics(),
                    itemCount: 95,
                    controller: controller,
                    itemBuilder: (context, index) => Container(
                          width: 10,
                          color: Colors.transparent,
                          child: const VerticalDivider(
                            color: Colors.white,
                            thickness: 1,
                            indent: 7.5,
                            endIndent: 7.5,
                          ),
                        ))),
          ),
          Align(
            alignment: Alignment.center,
            child: SizedBox(
              width: 50,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    "${(rotationValue * 57.3).toStringAsFixed(1)}°",
                    textAlign: TextAlign.center,
                    style: TextStyle(
                        color: widget.activeColor ?? CustomColors.activeColor,
                        fontSize: 15,
                        fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(
                    height: 5.0,
                  ),
                  Container(
                    height: 15,
                    width: 1.5,
                    color: widget.activeColor ?? CustomColors.activeColor,
                  )
                ],
              ),
            ),
          ),
          Align(
            alignment: Alignment.centerLeft,
            child: Container(
              width: 90,
              decoration: BoxDecoration(
                gradient: LinearGradient(colors: [
                  CustomColors.primaryColor.withOpacity(0.9),
                  CustomColors.primaryColor.withOpacity(0.3)
                ]),
              ),
            ),
          ),
          Align(
            alignment: Alignment.centerRight,
            child: Container(
              width: 90,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                    transform: const GradientRotation(3.14159),
                    colors: [
                      CustomColors.primaryColor.withOpacity(0.9),
                      CustomColors.primaryColor.withOpacity(0.3)
                    ]),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget allFilters() {
    return Visibility(
      visible: ActionType.filters == _selectedAction,
      child: Container(
        margin: const EdgeInsets.only(bottom: 10.0),
        height: 70.0,
        child: ListView.builder(
            itemCount: filters.length,
            scrollDirection: scrollDirection,
            controller: _autoScrollController,
            shrinkWrap: true,
            padding: const EdgeInsets.only(left: 10, right: 10),
            physics: const AlwaysScrollableScrollPhysics(),
            addAutomaticKeepAlives: true,
            itemBuilder: (context, index) {
              return AutoScrollTag(
                key: ValueKey(index),
                controller: _autoScrollController!,
                index: index,
                child: InkWell(
                  onTap: () async {
                    setState(() {
                      selectedFilter = index;
                    });
                    await _autoScrollController!.scrollToIndex(selectedFilter,
                        preferPosition: AutoScrollPosition.middle);
                  },
                  splashColor: Colors.transparent,
                  highlightColor: Colors.transparent,
                  child: Stack(
                    alignment: AlignmentDirectional.bottomCenter,
                    children: [
                      Container(
                        margin: const EdgeInsets.all(3.0),
                        decoration: BoxDecoration(
                          border: Border.all(
                              color: selectedFilter == index
                                  ? widget.activeColor ??
                                      CustomColors.activeColor
                                  : Colors.transparent),
                          borderRadius:
                              const BorderRadius.all(Radius.circular(5.0)),
                        ),
                        child: ColorFiltered(
                          colorFilter:
                              ColorFilter.matrix(filters[index]['filter']),
                          child: Container(
                            width: 60.0,
                            decoration: BoxDecoration(
                                color: CustomColors.primaryColor,
                                borderRadius: const BorderRadius.all(
                                    Radius.circular(5.0)),
                                image: DecorationImage(
                                  image: FileImage(widget.image),
                                  fit: BoxFit.cover,
                                )),
                          ),
                        ),
                      ),
                      Positioned(
                          bottom: 8,
                          child: Container(
                            decoration: const BoxDecoration(boxShadow: [
                              BoxShadow(
                                  color: Colors.black26,
                                  blurRadius: 5,
                                  spreadRadius: 1)
                            ]),
                            child: Text(
                              filters[index]['name'],
                              textAlign: TextAlign.center,
                              style: const TextStyle(
                                  color: Colors.white, fontSize: 12),
                            ),
                          ))
                    ],
                  ),
                ),
              );
            }),
      ),
    );
  }

  Widget text() {
    return Visibility(
      visible: _selectedAction == ActionType.text && !isEditorEnable,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Visibility(
              visible: currentTextIndex != null,
              child: changeAngleWidget(_textRotationController)),
          AvailableOptions(
              child: const Text(
                'Add Text',
                style: TextStyle(
                    color: Colors.white,
                    fontSize: 20,
                    fontWeight: FontWeight.bold),
              ),
              padding: const EdgeInsets.only(
                  left: 40, right: 40, top: 10, bottom: 10),
              onTap: () {
                setState(() {
                  isEditorEnable = true;
                });
                Navigator.of(context)
                    .push(
                  PageRouteBuilder(
                    opaque: false,
                    pageBuilder: (_, __, ___) => AddText(
                        activeColor:
                            widget.activeColor ?? CustomColors.activeColor),
                  ),
                )
                    .then((value) {
                  if (value != null) {
                    Map<TextWidget, dynamic> map;
                    map = value;
                    map.addAll({
                      TextWidget.x: 100.0,
                      TextWidget.y: 100.0,
                      TextWidget.xPrev: 100.0,
                      TextWidget.yPrev: 100.0,
                      TextWidget.angle: 0.0
                    });
                    textWidgets.add(map);
                  }
                  setState(() {
                    isEditorEnable = false;
                    currentTextIndex = textWidgets.length - 1;
                  });
                });
              }),
        ],
      ),
    );
  }

  Widget paintBoundary() {
    return GestureDetector(
      onTap: () {
        if (textWidgets.isNotEmpty) {
          setState(() {
            for (var v in textWidgets) {
              v[TextWidget.borderColorStatus] = false;
              currentTextIndex = null;
            }
          });
        }
      },
      child: Stack(
        children: [
          Align(
            alignment: Alignment.center,
            child: RepaintBoundary(
              key: _globalKey,
              child: Stack(
                children: [
                  Transform.rotate(
                    angle: absoluteRotation * math.pi / 180,
                    child: Transform.scale(
                      scaleX: scaleX,
                      scaleY: scaleY,
                      child: Transform.rotate(
                        angle: rotationValue,
                        child: ColorFiltered(
                            colorFilter: ColorFilter.matrix(
                                filters[selectedFilter]['filter']),
                            child: Image.file(widget.image)),
                      ),
                    ),
                  ),
                  ...textPainter(),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  List<Widget> textPainter() {
    return List.generate(
        textWidgets.length,
        (index) => Visibility(
              visible: textWidgets.isNotEmpty &&
                  textWidgets[index][TextWidget.visibility],
              child: Positioned(
                left: textWidgets[index][TextWidget.x],
                top: textWidgets[index][TextWidget.y],
                child: GestureDetector(
                  onPanDown: (d) {
                    textWidgets[index][TextWidget.xPrev] =
                        textWidgets[index][TextWidget.x];
                    textWidgets[index][TextWidget.yPrev] =
                        textWidgets[index][TextWidget.y];
                  },
                  onHorizontalDragEnd: (details) {},
                  onHorizontalDragUpdate: (details) {
                    setState(() {
                      textWidgets[index][TextWidget.x] = textWidgets[index]
                              [TextWidget.xPrev] +
                          details.localPosition.dx;
                      textWidgets[index][TextWidget.y] = textWidgets[index]
                              [TextWidget.yPrev] +
                          details.localPosition.dy;
                    });
                  },
                  onVerticalDragEnd: (details) {},
                  onVerticalDragUpdate: (details) {
                    setState(() {
                      textWidgets[index][TextWidget.x] = textWidgets[index]
                              [TextWidget.xPrev] +
                          details.localPosition.dx;
                      textWidgets[index][TextWidget.y] = textWidgets[index]
                              [TextWidget.yPrev] +
                          details.localPosition.dy;
                    });
                  },
                  onTap: () {
                    if (textWidgets[index][TextWidget.borderColorStatus]) {
                      setState(() {
                        isEditorEnable = true;
                        textWidgets[index][TextWidget.visibility] = false;
                      });
                      Navigator.of(context)
                          .push(
                        PageRouteBuilder(
                          opaque: false,
                          pageBuilder: (_, __, ___) => AddText(
                              initialData: {
                                TextWidget.key: textWidgets[index]
                                    [TextWidget.key],
                                TextWidget.text: textWidgets[index]
                                    [TextWidget.text],
                                TextWidget.align: textWidgets[index]
                                    [TextWidget.align],
                                TextWidget.boxType: textWidgets[index]
                                    [TextWidget.boxType],
                                TextWidget.borderColorStatus: textWidgets[index]
                                    [TextWidget.borderColorStatus],
                                TextWidget.boxColorIndex: textWidgets[index]
                                    [TextWidget.boxColorIndex],
                                TextWidget.visibility: textWidgets[index]
                                    [TextWidget.visibility],
                                TextWidget.textSize: textWidgets[index]
                                    [TextWidget.textSize]
                              },
                              activeColor: widget.activeColor ??
                                  CustomColors.activeColor),
                        ),
                      )
                          .then((value) {
                        if (value != null) {
                          Map<TextWidget, dynamic> map;
                          map = value;
                          map.addAll({
                            TextWidget.x:
                                textWidgets[index][TextWidget.x] ?? 100.0,
                            TextWidget.y:
                                textWidgets[index][TextWidget.y] ?? 100.0,
                            TextWidget.xPrev:
                                textWidgets[index][TextWidget.xPrev] ?? 100.0,
                            TextWidget.yPrev:
                                textWidgets[index][TextWidget.yPrev] ?? 100.0,
                            TextWidget.angle:
                                textWidgets[index][TextWidget.angle] ?? 0.0,
                          });
                          textWidgets[index] = map;
                        }
                        setState(() {
                          isEditorEnable = false;
                          currentTextIndex = textWidgets.length - 1;
                        });
                      });
                    } else {
                      if (textWidgets.isNotEmpty) {
                        for (var i = 0; i < textWidgets.length; i++) {
                          if (i == index) {
                            textWidgets[i][TextWidget.borderColorStatus] = true;
                            setState(() {
                              currentTextIndex = i;
                            });
                          } else {
                            textWidgets[i][TextWidget.borderColorStatus] =
                                false;
                          }
                        }
                      }
                    }
                  },
                  child: textWidgets.isNotEmpty
                      ? Transform.rotate(
                          angle: textWidgets[index][TextWidget.angle],
                          child: Stack(
                            children: [
                              Container(
                                padding: const EdgeInsets.only(
                                    left: 10, right: 10, top: 5, bottom: 5),
                                margin: const EdgeInsets.only(
                                    left: 5, right: 5, top: 5, bottom: 5),
                                decoration: BoxDecoration(
                                    color: textWidgets[index]
                                                [TextWidget.boxType] ==
                                            BoxType.white
                                        ? CustomColors.allColors[
                                            textWidgets[index]
                                                [TextWidget.boxColorIndex]]
                                        : textWidgets[index]
                                                    [TextWidget.boxType] ==
                                                BoxType.faintWhite
                                            ? CustomColors
                                                .allColors[textWidgets[index]
                                                    [TextWidget.boxColorIndex]]
                                                .withOpacity(0.6)
                                            : Colors.transparent,
                                    borderRadius: const BorderRadius.all(
                                        Radius.circular(6.0))),
                                child: Center(
                                  child: Text(
                                    textWidgets[index][TextWidget.text],
                                    textAlign: textWidgets[index]
                                                [TextWidget.align] ==
                                            TextDirectionValue.left
                                        ? TextAlign.left
                                        : textWidgets[index]
                                                    [TextWidget.align] ==
                                                TextDirectionValue.center
                                            ? TextAlign.center
                                            : TextAlign.right,
                                    style: TextStyle(
                                        fontFamily: "Highup",
                                        fontWeight: FontWeight.w400,
                                        fontSize: textWidgets[index]
                                            [TextWidget.textSize],
                                        color: textWidgets[index][
                                                    TextWidget.boxColorIndex] ==
                                                1
                                            ? Colors.white
                                            : Colors.black),
                                  ),
                                ),
                              ),
                              Visibility(
                                visible: textWidgets[index]
                                    [TextWidget.borderColorStatus],
                                child: Positioned(
                                  top: 0,
                                  child: Container(
                                    height: 15,
                                    width: 15,
                                    decoration: BoxDecoration(
                                        color: Colors.white,
                                        shape: BoxShape.circle,
                                        border: Border.all(color: Colors.grey)),
                                  ),
                                ),
                              ),
                              Visibility(
                                visible: textWidgets[index]
                                    [TextWidget.borderColorStatus],
                                child: Positioned(
                                  top: 0,
                                  right: 0,
                                  child: GestureDetector(
                                    onTap: () => setState(
                                        () => textWidgets.removeAt(index)),
                                    child: Container(
                                      height: 20,
                                      width: 20,
                                      decoration: BoxDecoration(
                                          color: Colors.white,
                                          shape: BoxShape.circle,
                                          border:
                                              Border.all(color: Colors.grey)),
                                      child: const Center(
                                        child: Icon(
                                          Icons.clear,
                                          color: Colors.deepOrange,
                                          size: 12,
                                        ),
                                      ),
                                    ),
                                  ),
                                ),
                              ),
                              Visibility(
                                visible: textWidgets[index]
                                    [TextWidget.borderColorStatus],
                                child: Positioned(
                                  bottom: 0,
                                  left: 0,
                                  child: Container(
                                    height: 15,
                                    width: 15,
                                    decoration: BoxDecoration(
                                        color: Colors.white,
                                        shape: BoxShape.circle,
                                        border: Border.all(color: Colors.grey)),
                                  ),
                                ),
                              ),
                              Visibility(
                                visible: textWidgets[index]
                                    [TextWidget.borderColorStatus],
                                child: Positioned(
                                  bottom: 0,
                                  right: 0,
                                  child: Container(
                                    height: 15,
                                    width: 15,
                                    decoration: BoxDecoration(
                                        color: Colors.white,
                                        shape: BoxShape.circle,
                                        border: Border.all(color: Colors.grey)),
                                  ),
                                ),
                              )
                            ],
                          ),
                        )
                      : const SizedBox.shrink(),
                ),
              ),
            ));
  }

  Widget? buildEmptyCounter(BuildContext context,
          {required int currentLength,
          int? maxLength,
          required bool isFocused}) =>
      null;

  /// Main method responsible to render new image by using repaint boundary
  Future<ByteData> _capturePngToByteData() async {
    try {
      RenderRepaintBoundary boundary = _globalKey.currentContext
          ?.findRenderObject() as RenderRepaintBoundary;
      boundary = _globalKey.currentContext?.findRenderObject()
          as RenderRepaintBoundary;
      double dpr = ui.window.devicePixelRatio;
      ui.Image image =
          await boundary.toImage(pixelRatio: widget.pixelRatio ?? dpr);
      ByteData? _byteData =
          await image.toByteData(format: ui.ImageByteFormat.png);
      return _byteData!;
    } catch (e) {
      rethrow;
    }
  }
}
